commit b15b8cf0a0fefdb006864a24c341eaaddec035bc
Author: Joe Mills <joe@midokura.com>
Date:   Tue Aug 11 08:49:30 2015 +0000

    Add filter for midonet networking types
    
    In the midonet ML2 mechanism driver, we want to only notify the
    midonet backend of the changes happening on networks, ports, and
    subnets that belong to networks with the 'midonet' network type.
    This patch adds a decorator that filters function calls based
    on the network type.
    
    The filtering for each resource type (port, subnet, and network)
    are each different, so different ways of getting the network
    are needed for each.
    
    Change-Id: I6c0ebc75b77ece0e96ad6ee152fb62be2ce52afe
    Signed-off-by: Joe Mills <joe@midokura.com>

diff --git a/midonet/neutron/common/util.py b/midonet/neutron/common/util.py
index b856727..700fe92 100644
--- a/midonet/neutron/common/util.py
+++ b/midonet/neutron/common/util.py
@@ -13,12 +13,16 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+import functools
+
 import time
 from webob import exc as w_exc
 
+from midonet.neutron.common import constants as const
 from midonet.neutron.common import exceptions as exc
 from midonetclient import exc as mn_exc
 
+from neutron.extensions import providernet
 from neutron import i18n
 from oslo_log import log as logging
 
@@ -65,3 +69,38 @@ def retry_on_error(attempts, delay, error_cls):
             raise err
         return retry
     return internal_wrapper
+
+
+def is_midonet_network(network):
+    return network.get(providernet.NETWORK_TYPE) == const.TYPE_MIDONET
+
+
+def filter_network(context):
+    return is_midonet_network(context.current)
+
+
+def filter_subnet(context):
+    # REVISIT(joe): implement this filtering using upstream neutron info
+    # after the subnet context has the network information
+    netid = context.current['network_id']
+    network = context._plugin.get_network(context._plugin_context, netid)
+    return is_midonet_network(network)
+
+
+def filter_port(context):
+    return is_midonet_network(context.network.current)
+
+
+def midonet_filter(filter_func):
+    def filter_resource(func):
+        @functools.wraps(func)
+        def wrapper(self, context):
+            if filter_func(context):
+                func(self, context)
+        return wrapper
+    return filter_resource
+
+
+midonet_network_filter = midonet_filter(filter_network)
+midonet_subnet_filter = midonet_filter(filter_subnet)
+midonet_port_filter = midonet_filter(filter_port)
diff --git a/midonet/neutron/ml2/mech_driver.py b/midonet/neutron/ml2/mech_driver.py
index 5dc0e80..cb22c69 100644
--- a/midonet/neutron/ml2/mech_driver.py
+++ b/midonet/neutron/ml2/mech_driver.py
@@ -17,6 +17,8 @@ from neutron.common import constants
 
 from midonet.neutron.client import base as c_base
 from midonet.neutron.common import config  # noqa
+from midonet.neutron.common import constants as const
+from midonet.neutron.common import util
 from midonet.neutron.ml2 import sg_callback
 
 from neutron.common import constants as n_const
@@ -48,66 +50,79 @@ class MidonetMechanismDriver(api.MechanismDriver):
         self.sec_handler = sg_callback.MidonetSecurityGroupsHandler(
             self.client)
 
+    @util.midonet_network_filter
     @log_helpers.log_method_call
     def create_network_precommit(self, context):
         network = context.current
         self.client.create_network_precommit(context, network)
 
+    @util.midonet_network_filter
     @log_helpers.log_method_call
     def create_network_postcommit(self, context):
         network = context.current
         self.client.create_network_postcommit(network)
 
+    @util.midonet_network_filter
     @log_helpers.log_method_call
     def update_network_precommit(self, context):
         net = context.current
         self.client.update_network_precommit(context, net['id'], net)
 
+    @util.midonet_network_filter
     @log_helpers.log_method_call
     def update_network_postcommit(self, context):
         net = context.current
         self.client.update_network_postcommit(net['id'], net)
 
+    @util.midonet_network_filter
     @log_helpers.log_method_call
     def delete_network_precommit(self, context):
         network_id = context.current['id']
         self.client.delete_network_precommit(context, network_id)
 
+    @util.midonet_network_filter
     @log_helpers.log_method_call
     def delete_network_postcommit(self, context):
         network_id = context.current['id']
         self.client.delete_network_postcommit(network_id)
 
+    @util.midonet_subnet_filter
     @log_helpers.log_method_call
     def create_subnet_precommit(self, context):
         subnet = context.current
         self.client.create_subnet_precommit(context, subnet)
 
+    @util.midonet_subnet_filter
     @log_helpers.log_method_call
     def create_subnet_postcommit(self, context):
         subnet = context.current
         self.client.create_subnet_postcommit(subnet)
 
+    @util.midonet_subnet_filter
     @log_helpers.log_method_call
     def update_subnet_precommit(self, context):
         subnet = context.current
         self.client.update_subnet_precommit(context, subnet['id'], subnet)
 
+    @util.midonet_subnet_filter
     @log_helpers.log_method_call
     def update_subnet_postcommit(self, context):
         subnet = context.current
         self.client.update_subnet_postcommit(subnet['id'], subnet)
 
+    @util.midonet_subnet_filter
     @log_helpers.log_method_call
     def delete_subnet_precommit(self, context):
         subnet_id = context.current['id']
         self.client.delete_subnet_precommit(context, subnet_id)
 
+    @util.midonet_subnet_filter
     @log_helpers.log_method_call
     def delete_subnet_postcommit(self, context):
         subnet_id = context.current['id']
         self.client.delete_subnet_postcommit(subnet_id)
 
+    @util.midonet_port_filter
     @log_helpers.log_method_call
     def create_port_precommit(self, context):
         port = context.current
@@ -120,27 +135,32 @@ class MidonetMechanismDriver(api.MechanismDriver):
                      " router %s") % port['device_id'])
             raise n_exc.BadRequest(resource='router', msg=msg)
 
+    @util.midonet_port_filter
     @log_helpers.log_method_call
     def create_port_postcommit(self, context):
         port = context.current
         self._validate_port_create(port)
         self.client.create_port_postcommit(port)
 
+    @util.midonet_port_filter
     @log_helpers.log_method_call
     def update_port_precommit(self, context):
         port = context.current
         self.client.update_port_precommit(context, port['id'], port)
 
+    @util.midonet_port_filter
     @log_helpers.log_method_call
     def update_port_postcommit(self, context):
         port = context.current
         self.client.update_port_postcommit(port['id'], port)
 
+    @util.midonet_port_filter
     @log_helpers.log_method_call
     def delete_port_precommit(self, context):
         port_id = context.current['id']
         self.client.delete_port_precommit(context, port_id)
 
+    @util.midonet_port_filter
     @log_helpers.log_method_call
     def delete_port_postcommit(self, context):
         port_id = context.current['id']
@@ -149,7 +169,12 @@ class MidonetMechanismDriver(api.MechanismDriver):
     @log_helpers.log_method_call
     def bind_port(self, context):
         for segment in context.segments_to_bind:
-            context.set_binding(segment[api.ID],
-                                self.vif_type,
-                                self.vif_details,
-                                constants.PORT_STATUS_ACTIVE)
+            if segment['network_type'] == const.TYPE_MIDONET:
+                context.set_binding(segment[api.ID],
+                                    self.vif_type,
+                                    self.vif_details,
+                                    constants.PORT_STATUS_ACTIVE)
+                break
+            else:
+                LOG.debug(('midonet mechanism driver did NOT bind '
+                           'port for segment %r'), segment)
